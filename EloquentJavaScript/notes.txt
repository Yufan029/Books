Chapter 1
String are encoded as a sequence of 16-bit numbers. These are called code units.

Chapter 3 Function

Closure
    This feature - being able to reference a specific instance of a local binding in an enclosing scope - is called closure.

    A function that references bindings from local scopes around it is called a closure.


    A good mental model: 
        is to think of function values as containing both the code in their body and the environment in which they are created.

        when called, the function body sees the environment in which it was created, not the environment in which it is called.

Recursive
function findSolution(target) {
  function find(current, history) {
    if (current == target) {
      return history;
    } else if (current > target) {
      return null;
    } else {
      return find(current + 5, `(${history} + 5)`) ||
             find(current * 3, `(${history} * 3)`);
    }
  }
  return find(1, "1");
}

console.log(findSolution(24));
// → (((1 * 3) + 5) * 3)


Pure function
    value-produce function has no side effects, not rely on side effects from other code.
    Same arguments, same results.
    does not modify the array it is given.


Chapter 4
    Data Structures: Objects and Arrays


When getting the property of an object:
  the word after the dot is the literal name of the property.
  the word in the [] is an expression, it will be evaluted to get the proerty name.

  (1)
    "string".length (length is the literal name of the property).
    
  (2)
    let l = "length";
    "string"[l]   (evalute expression "l" first to get the property name)

  property in anObject

To find out what properties an object has:
  console.log(Object.keys({x: 0, y: 0, z: 2}));
  // -> ["x", "y", "z"]

copies all properties from one object into another:
  let objectA = {a: 1, b: 2};
  Object.assign(objectA, {b: 3, c: 4});
  console.log(objectA);
  // -> {a: 1, b: 3, c: 4}

compare objects:
  == operator -> it compares by identity:
      it will produce true only if both objects are precisely the same vlaue.


ϕ =	n11n00 − n10n01 / √ n1•n0•n•1n•0

Rest parameters
    ... (three dots used as when define a function);

Spread operator
    ... (three dots used when calling a function, spread out the array into the function call)

Destructuring 解构
    function phi([n00, n01, n10, n11]),  phi([2, 3, 5, 3])
    let [n1, n2, n3] = [1, 2, 3]
    let {name} = {name: 'allen', age: '33'};



chapter 4 exercise 
  A list

// Your code here.
function arrayToList(arr) {
  if (arr.length === 1) {
    return {value: arr[0], rest: null};
  } else {
    return {value: arr[0], rest: arrayToList(arr.slice(1))}
  }
}

function listToArray(list) {
  let arr = [];
  while (list != null) {
    arr.push(list.value);
    list = list.rest;
  }
  return arr;
}

function prepend(element, list) {
  return {value: element, rest: list};
}

// non-recursive version of nth
function testnth(list, number) {
  let arr = listToArray(list);
  if (arr.length < number) {
    return undefined;
  } else {
    return arr[number];
  }    
}

function nth(list, number) {
  if (list == null) {
    return undefined;
  } else if (number === 0) {
	  return list.value;
  } else {
	  return nth(list.rest, --number);
  }
}

// testing data
console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 2));
// → 20

Objects can use === to compare, return true when they are the same object.




Chapter 5
Higher-order function

Functions that operator on other functions, either by taking them as arguments or by returning them, are called higher-order functions.

The term comes form mathematics.  
// 高阶函数
//   接受一个或多个函数作为输入
//   输出一个函数

Higher-order functions allow us to abstract over actions, not just values.

  (1) functions that create new functions.

    function greaterThan(n) {
      return m => m > n;
    }

    let greaterThan11 = greaterThan(11);
    greaterThan11(15);
    // -> true;


  (2) functions that change other functions.
  (3) functions that provide new types of control flow.



UTF-16
  - the format used by JavaScript strings.
  - most common characters using a single 16-bit code unit but uses a pair of two such units for others.
  - considered a bad idea today.


charCodeAt()
  - gives you a code unit, not a full character code.

fromCharCode()


codePointAt()
  - give a full Unicode character.
  - the argument, still an index into the seqence of code units.
  - still need to deal with the question of whether a character takes up one or two code units.

fromCodePoint()


findIndex(given function)
  - like indexOf, but instead of looking for a specific value, it finds the first value for which the given function returns true.


Higher-Order function for Array:
  forEach, filter, map, reduce, some, findIndex, every 

concat()
  - create a new array that connect two or more arrays together

push() 
  - push the element or array into the original one
  - return the length of the array.


Chapter 6 The Secret Life of Objects

Separating interface from implementation is a great idea. Usually called encapsulation.

Arrow function 
  - they do not bind their own 'this' but can see the 'this' binding of the scope around them.
  - doesn't have its own 'this' binding.

Prototype
  - another object that is used as a fallback source of properties.

Object.getPrototypeOf()
Object.create(prototype)
  - create an object with a specific prototype

const aa = new bb();
  - Object.getPrototypeOf(aa) === bb.prototype === aa.__proto__;

put the keyword 'new' in front of a function call, the function is treated as a constructor.

When create an object based on 'new' operator, object'prototype === constructor's prototype

All function, when create automatically get a proerty named prototype, default value is {}, derived from Object.prototype.

Class
  - is constructor + prototype property.

Class declarations currently(2019/08) allow only methods. For now, you can create such properties by directly manipulating the prototype after you've defined the class.

Create an object with no prototype:
  - Object.create(null)

Object.keys() / (object).hasOwnProperty() / (proterty) in (object)

Symbol
  - unique
  - usable as property names
  - suitable for defining interfaces that can peacefully live alongside other properties.

Object used in for/of loop:
  - iterable.
    - means that it has a method named with the "Symbol.iterator" symbol.
      - a symbol defined by JS language, and stored as a property of the "Symbol" function.

this method (Symbol.iterator) returns an object that provides "iterator" (another interface).

iterator
  - next (return an object, which has property named 'value' and 'done')
    - value
    - done


字符串“OK”，有个名字为Symbol.iterator()的方法，返回一个iterator，这个iterator有next方法，返回遍历的对象，这个对象有value和done两个properties。

let okIterator = "OK"[Symbol.iterator]();
console.log(okIterator.next());
// → {value: "O", done: false}
console.log(okIterator.next());
// → {value: "K", done: false}
console.log(okIterator.next());
// → {value: undefined, done: true}


Inside a class declaration, methods that have 'static' written before their name are stored on the constructor.

encapsulation and polymorphism can be used to separate pieces of code from each other, reducing the tangledness of the overall program, inheritance fundamentally ties classes together, creating more tangle.

Inheritance shouldn't be the first tool you reach for.

instanceof
  - know whether an object was derived from a specific class.
  - console.log([1] instanceof Array)
  - // -> true


iterable - implement the method named 'Symbol.iterator', which return 'iterator', which return {value: *, done: true/false};

array-like - index & length;

Array.from(obj[, mapFn, thisArg])
  - turn iterable or array-like object to real Array.


Chapter 7 Project: A Robot

Reflexively writing classes for every concept in your application tends to leave you with a collection of interconnected objects that each have their own internal, changing state.

Such programs are often hard to understand and thus easy to break;

the most important limit on what kind of systems we can build is how much we can understand.
Anything that makes your code easier to understand makes it possible to build a more ambitious system.


Chapter 9 Regular expression


Date
  - month start at 0
  - day   start at 1

new Date().getTime()
  - return the timestamps (milliseconds since 1970)

Date.now()
  - return the timestamps

^ - match the start of the string
  - To invert a set of characters.
      (1). to express that you want to match any character except the ones in the set - you can write a caret (^) character after the opening bracket.
          e.g.
              let notBinary = /[^01]/;
              console.log(notBinary.test('1110010101001')); // false;
              console.log(notBinary.test('110201010140'));  // true;
      (2). A string of character enclosed in square bracket [] matches any one character in that string.
          If the first character in the bracket is a caret ^, it matches any character except those in the string.
          e.g.
            For example, [abc] matches a, b, or c, but not x, y, or z. However, [^abc] matches x, y, or z, but not a, b, or c.
      (3). The caret serves two different purposes. It is a special character that denotes “the beginning of a line” and it is a “not” operator inside of []s.
      (4). **** we can use [^] as a way to match any character.
    
$ - match the end of the string

\d - digit character
\w - alphanumeric character ("word charactor": abc..., 123..., _'underscore character')
\s - whitespace character
\b - word boundary (beginning position or end position of a string, or a position between \w and \W), it's a position!

Choise pattern
  | - let animal = /\b\d+ (pig|cow|chicken)s?\b/
      console.log(animal.test("15 pigs")); // --> true;


replace
  - 'papa'.replace('p', 'm');
  - 'Borobudur'.replace(/[ou]/g, 'a');
  - 'Liskov, Barbara\nMcCarthy, John\nWadler, Philip'.replace(/(\w+), (\w+)/g, '$2 $1');
  - 'the cia and fbi'.replace(/\b(fbi|cia)\b/g, str=>str.toUpperCase());

  - function minusOne(match, amount, unit) {
      amout = Number(amount) - 1;
      if (amount == 1) {
        unit = unit.split(0, unit.length-1);
      } else if (amount == 0) {
        amount = 'no';
      }
      return amount + ' ' + unit;
  }

  - '1 lemon, 2 cabbages, and 101 eggs'.replace(/(\d+) (\w+)/g, minusOne);
    // the first parameter is the whole match, the second parameter(amount) is the first matched group, the third parameter(unit) is the second matched group;

  - remove all comments from JS code.
    function stripComments(code) {
      return code.replace(/\/\/.*|\/\*[^]*?\*\//g, '');     // question mark change the reg to nongreedy version.
    }

    We use [^] as a way to match any character between '/*' and '*/'.
    We are not using . (period), because period character does not match newline characters.

Because of backtracking, we say the repetition operators (+, *, ? {}) are greedy, they match as much as they can and backtrack from there.
If you put a qustion mark after them (+?, *?, ??, {}?), they become nongreedy and start by matching as little as possible.

Difference between /g (global) and /y (sticky)
  - /y the match will succeed only if it starts directly at lastIndex,

  e.g.
    let sticky = /abc/y;
    console.log(sticky.lastIndex); // ===> 0
    console.log(sticky.exec('xyz abc')); // ===> null
    sticky.lastIndex = 4;
    console.log(sticky.exec('xyz abc')); // ===> ['abc']

When can we use 'lastIndex' to determine the position to match?
  (1). regular expression has /g or /y
  (2). use exec method.


When using SHARED REGEXP (!!!with Global option!!!) for multiple exec calls, these automatically updates to the lastIndex property can cause problems.

e.g.
    let digit = /\d/g;
    console.log(digit.exec('here it it: 1'));      // =====> ["1"]
    console.log(digit.lastIndex);                  // =====> 13

    console.log(digit.exec('and now: 1'));         // =====> null
    console.log(digit.lastIndex);                  // =====> 0

this is the actual confusing point!!!  (global option);

Be cautious with global regular expressions.

two circumstances to use /g option:
  (1). replace
  (2). explicitly use lastIndex

user regex /\r?\n/ to split specific string both '\n' and '\r\n' between lines.

copy assignment is pass by reference!!!
let result = {}
let section = result; // point to the same place in the memory;
section = result[match[1]]     // reassign section make it to point to a new place.