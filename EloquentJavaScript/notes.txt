Chapter 1
String are encoded as a sequence of 16-bit numbers. These are called code units.

Chapter 3 Function

Closure
    This feature - being able to reference a specific instance of a local binding in an enclosing scope - is called closure.

    A function that references bindings from local scopes around it is called a closure.


    A good mental model: 
        is to think of function values as containing both the code in their body and the environment in which they are created.

        when called, the function body sees the environment in which it was created, not the environment in which it is called.

Recursive
function findSolution(target) {
  function find(current, history) {
    if (current == target) {
      return history;
    } else if (current > target) {
      return null;
    } else {
      return find(current + 5, `(${history} + 5)`) ||
             find(current * 3, `(${history} * 3)`);
    }
  }
  return find(1, "1");
}

console.log(findSolution(24));
// → (((1 * 3) + 5) * 3)


Pure function
    vlaue-produce function has no side effects, not rely on side effects from other code.
    Same arguments, same results.
    does not modify the array it is given.


Chapter 4
    Data Structures: Objects and Arrays


When getting the property of an object:
  the word after the dot is the literal name of the property.
  the word in the [] is an expression, it will be evaluted to get the proerty name.

  (1)
    "string".length (length is the literal name of the property).
    
  (2)
    let l = "length";
    "string"[l]   (evalute expression "l" first to get the property name)

  property in anObject

To find out what properties an object has:
  console.log(Object.keys({x: 0, y: 0, z: 2}));
  // -> ["x", "y", "z"]

copies all properties from one object into another:
  let objectA = {a: 1, b: 2};
  Object.assign(objectA, {b: 3, c: 4});
  console.log(objectA);
  // -> {a: 1, b: 3, c: 4}

compare objects:
  == operator -> it compares by identity:
      it will produce true only if both objects are precisely the same vlaue.


ϕ =	n11n00 − n10n01 / √ n1•n0•n•1n•0

Rest parameters
    ... (three dots used as when define a function);

Spread operator
    ... (three dots used when calling a function, spread out the array into the function call)

Destructuring 解构
    function phi([n00, n01, n10, n11]),  phi([2, 3, 5, 3])
    let [n1, n2, n3] = [1, 2, 3]
    let {name} = {name: 'allen', age: '33'};

chapter 4 exercise 
  A list

// Your code here.
function arrayToList(arr) {
  if (arr.length === 1) {
    return {value: arr[0], rest: null};
  } else {
    return {value: arr[0], rest: arrayToList(arr.slice(1))}
  }
}

function listToArray(list) {
  let arr = [];
  while (list != null) {
    arr.push(list.value);
    list = list.rest;
  }
  return arr;
}

function prepend(element, list) {
  return {value: element, rest: list};
}

// non-recursive version of nth
function testnth(list, number) {
  let arr = listToArray(list);
  if (arr.length < number) {
    return undefined;
  } else {
    return arr[number];
  }    
}

function nth(list, number) {
  if (list == null) {
    return undefined;
  } else if (number === 0) {
	  return list.value;
  } else {
	  return nth(list.rest, --number);
  }
}

// testing data
console.log(arrayToList([10, 20]));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(listToArray(arrayToList([10, 20, 30])));
// → [10, 20, 30]
console.log(prepend(10, prepend(20, null)));
// → {value: 10, rest: {value: 20, rest: null}}
console.log(nth(arrayToList([10, 20, 30]), 2));
// → 20

Objects can use === to compare, return true when they are the same object.




Chapter 5
Higher-order function

Functions that operator on other functions, either by taking them as arguments or by returning them, are called higher-order functions.

The term comes form mathematics.  
// 高阶函数
//   接受一个或多个函数作为输入
//   输出一个函数

Higher-order functions allow us to abstract over actions, not just values.

  (1) functions that create new functions.

    function greaterThan(n) {
      return m => m > n;
    }

    let greaterThan11 = greaterThan(11);
    greaterThan11(15);
    // -> true;


  (2) functions that change other functions.
  (3) functions that provide new types of control flow.



UTF-16
  - the format used by JavaScript strings.
  - most common characters using a single 16-bit code unit but uses a pair of two such units for others.
  - considered a bad idea today.


charCodeAt()
  - gives you a code unit, not a full character code.

fromCharCode()


codePointAt()
  - give a full Unicode character.
  - the argument, still an index into the seqence of code units.
  - still need to deal with the question of whether a character takes up one or two code units.

fromCodePoint()


findIndex(given function)
  - like indexOf, but instead of looking for a specific value, it finds the first value for which the given function returns true.


Higher-Order function for Array:
  forEach, filter, map, reduce, some, findIndex

concat()
  - create a new array that connect two or more arrays together

push() 
  - push the element or array into the original one
  - return the length of the array.


