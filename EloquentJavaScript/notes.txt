Chapter 3 Function

Closure
    This feature - being able to reference a specific instance of a local binding in an enclosing scope - is called closure.

    A function that references bindings from local scopes around it is called a closure.


    A good mental model: 
        is to think of function values as containing both the code in their body and the environment in which they are created.

        when called, the function body sees the environment in which it was created, not the environment in which it is called.

Recursive
function findSolution(target) {
  function find(current, history) {
    if (current == target) {
      return history;
    } else if (current > target) {
      return null;
    } else {
      return find(current + 5, `(${history} + 5)`) ||
             find(current * 3, `(${history} * 3)`);
    }
  }
  return find(1, "1");
}

console.log(findSolution(24));
// â†’ (((1 * 3) + 5) * 3)


Pure function
    vlaue-produce function has no side effects, not rely on side effects from other code.
    Same arguments, same results.


Chapter 4
    Data Structures: Objects and Arrays


When getting the property of an object:
  the word after the dot is the literal name of the property.
  the word in the [] is an expression, it will be evaluted to get the proerty name.

  (1)
    "string".length (length is the literal name of the property).
    
  (2)
    let l = "length";
    "string"[l]   (evalute expression "l" first to get the property name)

  property in anObject

To find out what properties an object has:
  console.log(Object.keys({x: 0, y: 0, z: 2}));
  // -> ["x", "y", "z"]

copies all properties from one object into another:
  let objectA = {a: 1, b: 2};
  Object.assign(objectA, {b: 3, c: 4});
  console.log(objectA);
  // -> {a: 1, b: 3, c: 4}